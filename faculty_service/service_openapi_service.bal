// AUTO-GENERATED FILE.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Represents an error
public type Error record {
    # Error code
    string code;
    # Error message
    string message;
};

# Represents a lecturer
public type Lecturer record {
    # Staff Number (Unique identifier)
    readonly string staffNumber;
    # Office Number
    string officeNumber;
    # Staff Name
    string staffName;
    # Title
    string title;
    # List of Courses
    Course[] courses;
};

# Represents a course
public type Course record {
    # Course Code (Unique identifier)
    readonly string courseCode;
    # Course Name
    string courseName;
    # NQF Level
    string nqfLevel;
};

# Error response
public type ErrorResponse record {
    # Represents an error
    Error 'error;
};

# Bad request response
public type ValidationError record {|
    *http:BadRequest;
    # Error response.
    ErrorResponse body;
|};

# Represents headers of created response
public type LocationHeader record {|
    # Location header. A link to the created resource.
    string location;
|};

# Resource Created response
public type ResourceCreated record {|
    *http:Created;
    # Location header representing a link to the created resource.
    LocationHeader headers;
|};

# Resource updated response
public type ResourceUpdated record {|
    *http:Ok;
|};

# Tables for storing Lecturers & Courses
table<Lecturer> key(staffNumber) lecturersTable = table [];
table<Course> key(courseCode) courseTable = table [];

listener http:Listener ep0 = new (8080, config = {host: "localhost"});

service / on ep0 {
    # 
    #
    # + return - Ok 
    resource function get lecturers() returns Lecturer[] {
        return lecturersTable.toArray();
    }
    # 
    #
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Created (Created)
    # BadRequestErrorResponse (BadRequest)
    resource function post lecturers(@http:Payload Lecturer lecturer) returns http:Created|BadRequestErrorResponse {
        //Validate lecturer information
        if (!isValidLecturer(lecturer)) {
            return <ValidationError>{
                body: {
                    'error: {
                        code: "INVALID_DATA",
                        message: "Invalid lecturer data"
                    }
                }
            };
        }

        //Add lecturer to table after successfull validation
        _= lecturersTable.add(lecturer);        

        //Return successfull response
        string lecturerUrl = string `/lecturers/${lecturer.staffNumber}`;
        return <ResourceCreated>{
            headers: {
                location: lecturerUrl
            }
        };

    }
    # 
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # Lecturer (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function get lecturers/[string staffNumber]() returns Lecturer|BadRequestErrorResponse {

        if (lecturersTable.hasKey(staffNumber)) {
            Lecturer foundLecturer = lecturersTable.get(staffNumber);
            return foundLecturer;
        } else {
            return <ValidationError>{
                body: {
                    'error: {
                        code: "LECTURER_NOT_FOUND",
                        message: "Lecturer not found"
                    }
                }
            };
        }

        
    }
    # 
    #
    # + staffNumber - parameter description 
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Ok (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function put lecturers/[string staffNumber](@http:Payload Lecturer lecturer) returns http:Ok|BadRequestErrorResponse {

        if (!lecturersTable.hasKey(staffNumber)) {
            return <ValidationError>{
                body: {
                    'error: {
                        code: "LECTURER_NOT_FOUND",
                        message: "Lecturer not found"
                    }
                }
            };
        }

        // Validate provided lecturer data
        if (!isValidLecturer(lecturer)) {
            return <ValidationError>{
                body: {
                    'error: {
                        code: "INVALID_DATA",
                        message: "Invalid lecturer data"
                    }
                }
            };
        }

        lecturersTable.put(lecturer);
        
        return <ResourceUpdated>{};


    }
    # 
    #
    # + staffNumber - parameter description 
    # + return - returns can be any of following types
    # Lecturer (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function delete lecturers/[string staffNumber]() returns Lecturer|BadRequestErrorResponse {

        if (lecturersTable.hasKey(staffNumber)) {
            Lecturer removed = lecturersTable.remove(staffNumber);
            return removed;
        } else {
            return <ValidationError>{
                body: {
                    'error: {
                        code: "LECTURER_NOT_FOUND",
                        message: "Lecturer not found"
                    }
                }
            };
        }


    }
    # 
    #
    # + officeNumber - parameter description 
    # + return - Ok 
    resource function get lecturers/office/[string officeNumber]() returns Lecturer[] {

        Lecturer[] lecturersInOffice = [];
        foreach var lecturer in lecturersTable {
            if (lecturer.officeNumber == officeNumber) {
                lecturersInOffice.push(lecturer);
            }
        }
        return lecturersInOffice;


    }
    # 
    #
    # + return - Ok 
    resource function get courses() returns Course[] {
    }
    # 
    #
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Created (Created)
    # BadRequestErrorResponse (BadRequest)
    resource function post courses(@http:Payload Course payload) returns http:Created|BadRequestErrorResponse {
    }
    # 
    #
    # + courseCode - parameter description 
    # + return - returns can be any of following types
    # Course (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function get courses/[string courseCode]() returns Course|BadRequestErrorResponse {
    }
    # 
    #
    # + courseCode - parameter description 
    # + payload - parameter description 
    # + return - returns can be any of following types
    # http:Ok (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function put courses/[string courseCode](@http:Payload Course payload) returns http:Ok|BadRequestErrorResponse {
    }
    # 
    #
    # + courseCode - parameter description 
    # + return - returns can be any of following types
    # Course (Ok)
    # BadRequestErrorResponse (BadRequest)
    resource function delete courses/[string courseCode]() returns Course|BadRequestErrorResponse {
    }
    

}
function isValidLecturer(Lecturer lecturer)  returns boolean {
    // Check if the staffNumber is unique
    if(lecturersTable.hasKey(lecturer.staffNumber)){
        return false;
    }

    // Check if all required fields are present and not empty
    if(lecturer.staffNumber == "" || lecturer.staffName == "" || lecturer.courses.length() == 0 || lecturer.officeNumber == "" || lecturer.title == ""){
        return false;
    }

    // Check if provided course codes for new lecturer exists in Course Table
    foreach var course in lecturer.courses {
        if(!courseTable.hasKey(course.courseCode)){
            return false;
        }
    }

    return true; 
}

